import os
import requests
from lxml import html

def get_deck_from_source(text):
    ''' Loops over lines and pulls out data '''
    deck = dict()
    full_text = text.split("\n")
    card_type = ""
    if text.startswith("Pokemon"):
        deck = get_from_text(text)
    else:
        for line in full_text:
            if line[0:2] == '##':
                type_splitter = line[2:].split(" ")
                card_type = ' '.join(str(x) for x in type_splitter[:len(type_splitter) - 2])
            if line[0:2] == '* ':
                text = line[2:]
                splitter = text.split(" ")
                # Get the last words (which are the card name)
                card = ' '.join(str(x) for x in splitter[1:len(splitter) - 1])
                cardName = ' '.join(str(x) for x in splitter[1:len(splitter) - 2])
                if card not in deck:
                    deck[card] = { 'count': int(splitter[0]), 'set': splitter[len(splitter) - 2], 'card': cardName, 'type': card_type, 'number': splitter[len(splitter) - 1] }
                else:
                    deck[card]['count'] += int(splitter[0])
    return deck

def create_deck_list(cards):
    pokemon = [x for x in cards if x.type == 'Pok\u00e9mon']
    trainers = [x for x in cards if x.type == 'Trainer Cards']
    energy = [x for x in cards if x.type == 'Energy']
    pksum = sum(c.count for c in pokemon)
    tcsum = sum(c.count for c in trainers)
    ensum = sum(c.count for c in energy)

    text = '****** Pokémon Trading Card Game Deck List ******\n\n'
    text += '##Pok\u00e9mon - ' + str(pksum) + '\n\n'

    for pk in pokemon:
        text += '* ' + str(pk.count) + ' ' + pk.name + ' ' + pk.setName + ' ' + pk.number + '\n'

    text += '\n##Trainer Cards - ' + str(tcsum) + '\n\n'

    for tc in trainers:
        text += '* ' + str(tc.count) + ' ' + tc.name + ' ' + tc.setName + ' ' + tc.number + '\n'

    text += '\n##Energy - ' + str(ensum) + '\n\n'

    for en in energy:
        text += '* ' + str(en.count) + ' ' + en.name + ' ' + en.setName + ' ' + en.number + '\n'

    text += '\nTotal Cards - ' + str(pksum + tcsum + ensum) + '\n\n'
    text += '****** Deck List Generated by the Pokémon TCG Online www.pokemon.com/TCGO ******'
    return text

def get_deck_from_limitless_tcg(url):
    ''' Get deck from url provided '''
    page = requests.get(url)
    tree = html.fromstring(page.content)

    # Get the value of the hidden deck list
    columns = tree.xpath('//div[@class="decklist"]/form/input/@value')
    return get_from_text(columns[0])

def get_from_text(text):
    ''' Gets the deck from a special limitless export format '''
    deck = dict()
    full_text = text.split("\n")
    card_type = ""
    for line in full_text:
        # Make sure none of the extra lines are included
        pokemon_check = line.startswith("Pokemon")
        trainer_check = line.startswith("Trainer")
        energy_check = line.startswith("Energy")

        if pokemon_check:
            card_type = 'Pok\u00e9mon'

        if trainer_check:
            card_type = 'Trainer Cards'

        if energy_check:
            card_type = 'Energy'

        full_check = pokemon_check or trainer_check or energy_check

        if not (full_check or line.strip() == ""):
            splitter = line.rstrip("\r").split(" ")
            # Get the last words (which are the card name)
            card = ' '.join(str(x) for x in splitter[1:len(splitter) - 1])
            cardName = ' '.join(str(x) for x in splitter[1:len(splitter) - 2])
            if card not in deck:
                deck[card] = { 'count': int(splitter[0]), 'set': splitter[len(splitter) - 2], 'card': cardName, 'type': card_type, 'number': splitter[len(splitter) - 1] }
            else:
                deck[card]['count'] += int(splitter[0])
    return deck